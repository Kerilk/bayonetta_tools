#define game 0;

typedef struct {
    byte   dummy;
    char   nz<read=normalRead>;
    char   ny<read=normalRead>;
    char   nx<read=normalRead>;
} normals_t<read=normals_tRead>;

string normalRead( char val ) {
    string s;
    SPrintf(s, "%f", val / 127.0);
    return s;
}

string normals_tRead( normals_t &value ) {
    string s;
    double fx = value.nx * 0.007874016f; // 1.0f/127.0f
    double fy = value.ny * 0.007874016f;
    double fz = value.nz * 0.007874016f;
    float nrm = Sqrt(fx*fx + fy*fy + fz*fz);
    SPrintf(s, "nx: %f, ny: %f, nz: %f, nrm: %f", fx, fy, fz, nrm);
    return s;
}

typedef struct  {
    ubyte val[4];
} ubyteList<read=ubyteListRead>;

string ubyteListRead( ubyteList &value ) {
    string s;
    SPrintf(s, "%3d, %3d, %3d, %3d", value.val[0], value.val[1], value.val[2], value.val[3]);
    return s;
}

typedef ubyteList tangents_t<read=tangents_tRead>;

string tangents_tRead(tangents_t &value) {
    string s;
    float tx = tangentRead(value.val[0]);
    float ty = tangentRead(value.val[1]);
    float tz = tangentRead(value.val[2]);
    float d = tangentRead(value.val[3]);
    float nrm = Sqrt(tx*tx + ty*ty + tz*tz);
    SPrintf(s, "tx: %f, ty: %f, tz: %f, sign: %f, nrm: %f", tx, ty, tz, d, nrm);
    return s;
}

LittleEndian();
char id[4] <hidden=true>;
Assert( Memcmp("WMB\0", id, 4) == 0, "Wrong file type");
FSeek(0);
#include "Bayonetta wmb base.bt"