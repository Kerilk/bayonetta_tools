LittleEndian();
char id[4] <hidden=true>;
Assert( Memcmp("WTB\0", id, 4) == 0, "Wrong file type");
FSeek(0);
struct {
    char    id[4]; //WTB\0
    int32   unknown;
    int32   numTex;
    uint32  offsetTextureOffsets <format=hex>;
    uint32  offsetTextureSizes <format=hex>;
    uint32  offsetTextureFlags <format=hex, comment="0x80000000 cube, 0x20000000 alpha, 0x10000000 1bit alpha, 0x3 dummy">;
    uint32  offsetTextureIdx <format=hex>;
    uint32  offsetTextureInfo <format=hex>;
} header;

FSeek( header.offsetTextureOffsets );
uint32  textureOffsets[header.numTex] <format=hex>;

FSeek( header.offsetTextureSizes );
int32  textureSizes[header.numTex] <format=hex>;


if (header.offsetTextureIdx) {
    FSeek( header.offsetTextureIdx );
    uint32 textureIndexes[header.numTex] <format=hex>;
}

if (header.offsetTextureFlags) {
    FSeek( header.offsetTextureFlags );
    uint32  textureFlags[header.numTex] <format=hex, comment="0x20000000 alpha, 0x10000000 1bit alpha, 0x3 dummy">;
}

local int i;
for ( i = 0; i < header.numTex; i++) {
    FSeek(textureOffsets[i]);
    if ( textureSizes[i] > 0 ) {
        struct {
            byte data[textureSizes[i]];
        } texture;
    } else {
        struct {
        } texture;
    }
}
