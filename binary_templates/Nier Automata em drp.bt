#include "Nier Automata items.bt"

LittleEndian();

string readEmID(uint16 id) {
  string out;
  SPrintf(out, "em%04x", id);
  return out;
}

string readItemID(uint32 id) {
  string out;
  SPrintf(out, "%u: %s", id, getItemName(id));
  return out;
}

FSeek(0);
struct {
    char     id[4];
    float    version;
    uint32   offsetEnemyDropData <format=hex>;
    uint32   enemyDropDataSize;
    uint32   dropItemSize;
    uint16   numEnemies;
    uint16   numDropItems;
} header;

FSeek(header.offsetEnemyDropData);
if( header.enemyDropDataSize == 0xE ) {     // enemyDropDataSize 14
    struct {
        uint16   unknownIndex;
        uint16   indexFirstDropItem;
        uint16   numUniqueDropItems;
        uint16   numGoldDrops;
        uint16   unknownFlag1;
        ubyte    dropAmount;
        ubyte    dropGoldAmount;
        uint16   unknownInt16;
    } enemyDropData[header.numEnemies];
} else if ( header.enemyDropDataSize == 0x18 ) {    // enemyDropDataSize 24
    struct {
        short   enemyID <read=readEmID>;
        uint16  unknownActorClass;
        uint32  unknownInt32;
        ubyte   levelRangeStart;
        ubyte   levelRangeEnd;
        uint16  indexFirstDropItem;
        uint16  numUniqueDropItems;
        uint16  numGoldDrops;
        uint16  unknownInt16;
        ubyte   dropAmount;
        ubyte   dropGoldAmount;
        uint16  unknownInt16;
        uint16  unknownInt16;
    } enemyDropData[header.numEnemies];
}

struct {
    uint32   itemID <read=readItemID>;
    uint32   dropWeight;
} dropItem[header.numDropItems];