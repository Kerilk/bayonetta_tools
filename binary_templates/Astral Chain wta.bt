#include "Switch Texture Formats.bt"

LittleEndian();
char id[4] <hidden=true>;
Assert( Memcmp("WTB\0", id, 4) == 0, "Wrong file type");
FSeek(0);
struct {
    char    id[4]; //WTB\0
    int32   unknown;
    int32   numTex;
    uint32  offsetTextureOffsets <format=hex>;
    uint32  offsetTextureSizes <format=hex>;
    uint32  offsetTextureFlags <format=hex>;
    uint32  offsetTextureIdx <format=hex>;
    uint32  offsetTextureInfo <format=hex>;
} header;

FSeek( header.offsetTextureOffsets );
uint32  textureOffsets[header.numTex] <format=hex>;

FSeek( header.offsetTextureSizes );
int32  textureSizes[header.numTex] <format=hex>;

FSeek( header.offsetTextureFlags );
uint32  textureFlags[header.numTex] <format=hex>;

FSeek( header.offsetTextureIdx );
uint32  textureIdx[header.numTex] <format=hex>;

FSeek( header.offsetTextureInfo );//thanks demonslayerx8@xentax, minmode
struct {
    char                  FOURCC[4];
    uint32                u_a<format=hex>;
    uint64                textureSize<format=hex>;
    uint32                headerSize<format=hex>;
    uint32                numMipMap;
    texture_type_t        texture_type;
    xt1_texture_format_t  format<format=hex>;
    uint32                width;
    uint32                height;
    uint32                depth;
    uint32                specialPad<comment="when flags & 0x4">;;
    byte                  blockHeightLog2;
    byte                  flags<comment="0x4: pad width in GOBs">;
    byte                  u_b;
    byte                  u_c;
    uint32                u_f<format=hex>;
} textureInfo[header.numTex];
